<?xml version="1.0" encoding="UTF-8"?>
<sequence name="SupportTicketListener-inboundSequence" trace="disable" xmlns="http://ws.apache.org/ns/synapse">
    <log category="INFO" level="full" description="Log the event received"/>
    
    <!-- Extract customer email from payload -->
    <property name="customer_email" expression="json-eval($.customer_email)" scope="default" type="STRING"/>
    <property name="ticket_id" expression="json-eval($.ticket_id)" scope="default" type="STRING"/>
    <property name="issue" expression="json-eval($.issue)" scope="default" type="STRING"/>
    <property name="customer_name" expression="json-eval($.customer_name)" scope="default" type="STRING"/>

    
    <!-- Log extracted email -->
    <log category="INFO" level="custom">
        <property name="extracted_email" expression="get-property('customer_email')"/>
    </log>

    <!-- Set email subject and content -->
    <property name="subject" expression="concat('Your Support Ticket Has Been Created â€“ Ticket ID: ', get-property('ticket_id'))"/>
    <property name="content" expression="concat('Dear ', get-property('customer_name'), ',&lt;br&gt;&lt;br&gt;Thank you for contacting Nexus Store Support. Your support ticket (&lt;b&gt;', get-property('ticket_id'), '&lt;/b&gt;) has been created regarding the following issue:&lt;br&gt;&lt;i&gt;', get-property('issue'), '&lt;/i&gt;&lt;br&gt;&lt;br&gt;Our support team will review your request and get back to you as soon as possible.&lt;br&gt;&lt;br&gt;Best regards,&lt;br&gt;Nexus Store Support Team')"/>

    
    <!-- Build SOQL query using concat with proper single quotes for SOQL -->
    <property name="soql_query" expression="concat(&quot;SELECT Id, Name, Type, Website, Phone, Industry, (SELECT Id, Name, Email FROM Contacts WHERE Email = '&quot;, get-property('customer_email'), &quot;') FROM Account WHERE Id IN (SELECT AccountId FROM Contact WHERE Email = '&quot;, get-property('customer_email'), &quot;')&quot;)"/>
    
    <!-- Log the constructed query -->
    <log category="INFO" level="custom">
        <property name="constructed_query" expression="get-property('soql_query')"/>
    </log>
    
    <!-- Execute Salesforce query with dynamic email filter -->
    <salesforcerest.query configKey="Salesforce">
        <queryString>{get-property('soql_query')}</queryString>
    </salesforcerest.query>

    <!-- Log the response -->
    <log category="INFO" level="full" description="Salesforce query response for specific account"/>
    
    <!-- Extract and set properties for account details -->
    <property name="account_name" expression="json-eval($.records[0].Name)" scope="default" type="STRING"/>
    <property name="account_type" expression="json-eval($.records[0].Type)" scope="default" type="STRING"/>
    <property name="account_website" expression="json-eval($.records[0].Website)" scope="default" type="STRING"/>
    <property name="account_phone" expression="json-eval($.records[0].Phone)" scope="default" type="STRING"/>
    <property name="account_industry" expression="json-eval($.records[0].Industry)" scope="default" type="STRING"/>
    
    <!-- Extract contact details -->
    <property name="contact_name" expression="json-eval($.records[0].Contacts.records[0].Name)" scope="default" type="STRING"/>
    <property name="contact_email" expression="json-eval($.records[0].Contacts.records[0].Email)" scope="default" type="STRING"/>
    
    <!-- Log extracted account and contact information -->
    <log category="INFO" level="custom">
        <property name="Account_Name" expression="get-property('account_name')"/>
        <property name="Account_Type" expression="get-property('account_type')"/>
        <property name="Account_Website" expression="get-property('account_website')"/>
        <property name="Account_Phone" expression="get-property('account_phone')"/>
        <property name="Account_Industry" expression="get-property('account_industry')"/>
        <property name="Contact_Name" expression="get-property('contact_name')"/>
        <property name="Contact_Email" expression="get-property('contact_email')"/>
    </log>

    <dataServiceCall description="Call Support Ticket Dataservice to persist tickets" serviceName="SupportTicketDatabase">
        <operations type="single">
            <operation name="insertSupportTicket">
                <param name="account_type" expression="get-property('account_type')"/>
                <param name="contact_name" expression="get-property('contact_name')"/>
                <param name="account_website" expression="get-property('account_website')"/>
                <param name="issue" expression="get-property('issue')"/>
                <param name="account_name" expression="get-property('account_name')"/>
                <param name="account_phone" expression="get-property('account_phone')"/>
                <param name="account_industry" expression="get-property('account_industry')"/>
                <param name="contact_email" expression="get-property('contact_email')"/>
                <param name="ticket_id" expression="get-property('ticket_id')"/>
            </operation>
        </operations>
        <source type="inline"/>
        <target type="body"/>
    </dataServiceCall>
    
<email.send configKey="GmailConnection">
    <from >{get-property('file','fromUserName')}</from>
    <personalName >Nexus Store Support</personalName>
    <to >{$ctx:customer_email}</to>
    <cc ></cc>
    <bcc ></bcc>
    <replyTo >{get-property('file','fromUserName')}</replyTo>
    <subject >{$ctx:subject}</subject>
    <content >{$ctx:content}</content>
    <contentType >text/html</contentType>
    <encoding >UTF-8</encoding>
    <attachments ></attachments>
    <inlineImages >[]</inlineImages>
    <contentTransferEncoding >Base64</contentTransferEncoding>
</email.send>
</sequence>